---
name: build wheel file

on:
  push:
  pull_request:
    types:
    - opened
    - reopened
    - synchronize
    - edited

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python: [cp312]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.21.3

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_ARCHS: native
        CIBW_BUILD: "${{ matrix.python }}-*"
        CIBW_SKIP: "*-musllinux_*"
        CIBW_BEFORE_ALL_MACOS: brew install swig
        CIBW_BEFORE_ALL_LINUX: yum install -y make cmake swig
        CIBW_BEFORE_BUILD: python -m pip install scikit-build
        CIBW_BUILD_VERBOSITY: 1

    - uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  test:
    needs:
    - build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: wheel-${{ matrix.os }}
        path: dist

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - shell: bash
      run: pip install dist/*.whl

    - shell: python
      run: |
        import solv
        pool = solv.Pool()
        repo = pool.add_repo("repo")
        repodata = repo.add_repodata()
        pkg = repo.add_solvable()
        pkg.name = 'example'
        pkg.evr = "{epoch}:{version}-{release}".format(epoch=0,version="1.0", release="1")
        pkg.arch = 'noarch'
        pool.createwhatprovides()
        pkg.add_deparray(solv.SOLVABLE_PROVIDES, pool.rel2id(pkg.nameid, pkg.evrid, solv.REL_EQ))
        pool.createwhatprovides()
        jobs1 = pool.select(pkg.name, solv.Selection.SELECTION_PROVIDES).jobs(solv.Job.SOLVER_INSTALL)
        print(jobs1)
        dirid = repodata.str2dir("/usr/include")
        repodata.add_dirstr(pkg.id, solv.SOLVABLE_FILELIST, dirid, "example.h")
        repodata.internalize()
        pool.addfileprovides()
        pool.createwhatprovides()
        jobs2 = pool.select("/usr/include/example.h", solv.Selection.SELECTION_FILELIST).jobs(solv.Job.SOLVER_INSTALL)
        print(jobs2)
        assert (len(jobs1) > 0) and (len(jobs2) > 0)
